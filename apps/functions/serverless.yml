service: hom-api-service
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  runtimeManagement: auto
  memorySize: 512
  timeout: 10
  versionFunctions: true
  tracing:
    lambda: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 's3:*'
          Resource:
            - 'arn:aws:s3:::hom-assets/*'
  vpc:
    securityGroupIds:
      - 'sg-04fc3cea2ee552103'
      - 'sg-073ca64743f4e8ad9'
    subnetIds:
      - 'subnet-009f69c26fb4ee1ba'
      - 'subnet-0bcfa8c596a7e18cd'
      - 'subnet-05c822d45e6d5638f'
      - 'subnet-0c00c3df3ee51f4a0'
      - 'subnet-05c4102986c32ce66'
      - 'subnet-057fb0897f4213bd1'

package:
  individually: true
  patterns:
    - '!src/**'
    - '!data/**'
    - '!libs/**'
    - '!local/**'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

functions:
  graphql:
    handler: dist/packages/hom/graphql/index.handler
    events:
      - http:
          path: /graphql
          method: POST
          cors: true
  playground:
    handler: dist/packages/hom/graphql/index.handler
    events:
      - http:
          path: /
          method: GET
    warmup:
      default:
        enabled: true

custom:
  serverless-offline:
    httpPort: 3000
    host: 0.0.0.0
    httpProxy: true
  warmup:
    default:
      enabled: true
      memorySize: 256
      name: warmer-default
      events:
        - schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
      prewarm: true
